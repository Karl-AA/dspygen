import dspy
from dspygen.utils.dspy_tools import init_dspy      

class GenerateQuestionSignature(dspy.Signature):
    """
    Use the transcript as context to generate the best question to ask to learn about the software the user wants to build.
    """
    transcript = dspy.InputField(desc="The requirements interview with the user.")
    
    next_question = dspy.OutputField(desc="The next question to ask the user.",
                                     prefix="Next question: ")

class TranscriptToQuestionModule(dspy.Module):
    """TranscriptToQuestionModule"""
    
    def __init__(self, **forward_args):
        super().__init__()
        self.forward_args = forward_args
        self.output = None

    def forward(self, transcript):
        pred = dspy.ChainOfThought(GenerateQuestionSignature)
        self.output = pred(transcript=transcript).next_question
        return self.output

from typer import Typer
app = Typer()

@app.command()
def call(transcript):
    """TranscriptToQuestionModule"""
    init_dspy()
    print(transcript_to_question_call(transcript=transcript))

def transcript_to_question_call(transcript):
    transcript_to_question = TranscriptToQuestionModule()
    return transcript_to_question.forward(transcript=transcript)

def main():
    init_dspy()
    transcript = "Assistant: What would you like to build?\n"
    print("Initial question: What do you need to build?")

    while True:
        user_input = input("\nYour response: ")
        if user_input.lower() == "stopstop":
            print("Conversation ended.")
            break

        # Add user input to the transcript
        transcript += "User: " + user_input + "\n"
        
        # Generate the next question based on the updated transcript
        next_question = transcript_to_question_call(transcript=transcript)
        
        # Add the generated question to the transcript
        transcript += "Assistant: " + next_question + "\n"

        # Clear the screen or add a separator for readability (optional, based on your preference)
        # For command line, you might use os.system('cls' if os.name == 'nt' else 'clear')
        print("\n" + "="*50 + "\n")  # Simple separator for clarity

        # Print the latest question generated by DSPy for the next round of input
        print("Latest question from DSPy: " + next_question)

    print("\nFinal Transcript:\n", transcript)

from fastapi import APIRouter
router = APIRouter()

@router.post("/transcript_to_question/")
async def transcript_to_question_route(data: dict):
    init_dspy()
    print(data)
    return transcript_to_question_call(**data)

if __name__ == "__main__":
    main()
